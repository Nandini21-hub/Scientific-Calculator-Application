import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.math.BigDecimal;
import java.math.MathContext;

public class Main extends JFrame implements ActionListener {
    private JTextField displayField;

    public Main() {
        setTitle("Scientific Calculator");
        setSize(400, 500);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        displayField = new JTextField(10);
        displayField.setEditable(false);
        displayField.setHorizontalAlignment(JTextField.RIGHT);

        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayout(6, 4));

        String[] buttons = {
                "7", "8", "9", "/",
                "4", "5", "6", "*",
                "1", "2", "3", "-",
                "0", ".", "=", "+",
                "C", "CE", "Back",
                "log", "sqrt", "sin", "cos", "tan"
        };

        for (String buttonText : buttons) {
            JButton button = new JButton(buttonText);
            button.addActionListener(this);
            buttonPanel.add(button);
        }

        getContentPane().setLayout(new BorderLayout());
        getContentPane().add(displayField, BorderLayout.NORTH);
        getContentPane().add(buttonPanel, BorderLayout.CENTER);
    }

    public void actionPerformed(ActionEvent e) {
        String action = e.getActionCommand();
        if (action.equals("=")) {
            try {
                BigDecimal result = evaluate(displayField.getText());
                displayField.setText(result.stripTrailingZeros().toPlainString());
            } catch (Exception ex) {
                displayField.setText("Error");
            }
        } else if (action.equals("C")) {
            displayField.setText("");
        } else if (action.equals("CE")) {
            if (!displayField.getText().isEmpty()) {
                displayField.setText(displayField.getText().substring(0, displayField.getText().length() - 1));
            }
        } else if (action.equals("Back")) {
            if (!displayField.getText().isEmpty()) {
                displayField.setText(displayField.getText().substring(0, displayField.getText().length() - 1));
            }
        } else if (action.equals("log")) {
            try {
                BigDecimal result = BigDecimal.valueOf(Math.log(Double.parseDouble(displayField.getText())));
                displayField.setText(result.stripTrailingZeros().toPlainString());
            } catch (NumberFormatException ex) {
                displayField.setText("Error");
            }
        } else if (action.equals("sqrt")) {
            try {
                BigDecimal result = BigDecimal.valueOf(Math.sqrt(Double.parseDouble(displayField.getText())));
                displayField.setText(result.stripTrailingZeros().toPlainString());
            } catch (NumberFormatException ex) {
                displayField.setText("Error");
            }
        } else if (action.equals("sin")) {
            try {
                BigDecimal result = BigDecimal.valueOf(Math.sin(Math.toRadians(Double.parseDouble(displayField.getText()))));
                displayField.setText(result.stripTrailingZeros().toPlainString());
            } catch (NumberFormatException ex) {
                displayField.setText("Error");
            }
        } else if (action.equals("cos")) {
            try {
                BigDecimal result = BigDecimal.valueOf(Math.cos(Math.toRadians(Double.parseDouble(displayField.getText()))));
                displayField.setText(result.stripTrailingZeros().toPlainString());
            } catch (NumberFormatException ex) {
                displayField.setText("Error");
            }
        } else if (action.equals("tan")) {
            try {
                BigDecimal result = BigDecimal.valueOf(Math.tan(Math.toRadians(Double.parseDouble(displayField.getText()))));
                displayField.setText(result.stripTrailingZeros().toPlainString());
            } catch (NumberFormatException ex) {
                displayField.setText("Error");
            }
        } else {
            displayField.setText(displayField.getText() + action);
        }
    }

    private BigDecimal evaluate(String expression) {
        String[] parts = expression.split("(?<=[-+*/])|(?=[-+*/])");
        BigDecimal result = new BigDecimal(parts[0]);
        for (int i = 1; i < parts.length; i += 2) {
            String operator = parts[i];
            BigDecimal operand = new BigDecimal(parts[i + 1]);
            switch (operator) {
                case "+":
                    result = result.add(operand);
                    break;
                case "-":
                    result = result.subtract(operand);
                    break;
                case "*":
                    result = result.multiply(operand);
                    break;
                case "/":
                    result = result.divide(operand, MathContext.DECIMAL128);
                    break;
            }
        }
        return result;
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }
}
